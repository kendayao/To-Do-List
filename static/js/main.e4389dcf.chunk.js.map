{"version":3,"sources":["components/header/Header.js","components/list/List.js","components/form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","List","props","onClick","delete","id","item","Form","useState","itemInput","setItemInput","JSON","parse","localStorage","getItem","items","setItems","handleDelete","prevItems","filter","index","useEffect","setItem","stringify","console","log","onChange","event","itemValue","target","value","type","name","preventDefault","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+RAWeA,MARf,WACI,OACI,yBAAKC,UAAU,WACX,4C,oBCKGC,MARf,SAAcC,GACV,OACI,yBAAKC,QAAS,kBAAID,EAAME,OAAOF,EAAMG,MACnC,4BAAKH,EAAMI,Q,MCwDNC,MA1Df,WAAe,MAOqBC,mBAAS,IAP9B,mBAOJC,EAPI,KAOOC,EAPP,OAQaF,mBAASG,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IARnE,mBAQJC,EARI,KAQGC,EARH,KA8BX,SAASC,EAAaZ,GAElBW,GAAS,SAAAE,GACL,OAAOA,EAAUC,QAAO,SAACJ,EAAOK,GAC5B,OAAOA,IAAUf,QAM7B,OAhBAgB,qBAAU,WACNR,aAAaS,QAAQ,QAASX,KAAKY,UAAUR,MAC9C,CAACA,IAGJS,QAAQC,IAAIV,GAYR,6BACA,yBAAKf,UAAU,OAAOK,GAAG,QACrB,2BAAOqB,SAjCf,SAA2BC,GACvB,IAAMC,EAAUD,EAAME,OAAOC,MAC7BpB,EAAakB,IA+B2BG,KAAK,OAAOC,KAAK,OAAOF,MAAOrB,IACnE,4BAAQN,QA5BhB,SAAqBwB,GACjBA,EAAMM,iBACNjB,EAAS,GAAD,mBAAKD,GAAL,CAAYN,KACpBC,EAAa,MA0BL,uCAGJ,4BACKK,EAAMmB,KAAI,SAAC5B,EAAMc,GACb,OAAO,kBAAC,EAAD,CAAMe,IAAKf,EAAOf,GAAIe,EAAOd,KAAMA,EAAMF,OAAQa,U,MCrC9DmB,MAXf,WACE,OACE,yBAAKpC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.e4389dcf.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nfunction Header(){\n    return(\n        <div className=\"heading\">\n            <h1>To Do List</h1>\n        </div>)\n    \n}\n\nexport default Header","import React from 'react'\nimport './List.css'\n\nfunction List(props){\n    return(\n        <div onClick={()=>props.delete(props.id)}>\n          <li>{props.item}</li>\n        </div>\n    )\n}\n\nexport default List","import React, { useState, useEffect } from 'react'\nimport List from '../list/List'\nimport './Form.css'\n\nfunction Form(){\n\n    // useEffect(()=>{\n    //     var storage=JSON.parse(localStorage.getItem('items'))\n    //     setItems(storage)\n    // },[])\n\n    const [itemInput, setItemInput]=useState(\"\")\n    const [items, setItems]=useState(JSON.parse(localStorage.getItem('items')) || [])\n\n    function handleInputChange(event){\n        const itemValue=event.target.value\n        setItemInput(itemValue)\n    }\n\n\n    function handleClick(event){\n        event.preventDefault();\n        setItems([...items, itemInput])\n        setItemInput(\"\")\n        \n        \n    }\n\n    useEffect(() => {\n        localStorage.setItem('items', JSON.stringify(items))\n    }, [items])\n   \n\n    console.log(items)\n    function handleDelete(id){\n       \n        setItems(prevItems=>{\n            return prevItems.filter((items, index)=>{\n                return index !== id\n            })\n        })\n    }\n  \n\n    return(\n        <div>\n        <div className=\"form\" id=\"form\">\n            <input onChange={handleInputChange} type=\"text\" name='item' value={itemInput}></input>\n            <button onClick={handleClick}>\n                <span>Add</span>\n            </button>\n        </div>\n            <ul>\n                {items.map((item, index)=>{\n                     return <List key={index} id={index} item={item} delete={handleDelete}/>\n                })}\n            </ul>\n        </div>\n    )\n\n}\n\nexport default Form","import React from 'react';\nimport Header from './components/header/Header'\nimport Form from './components/form/Form'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Form />\n      \n    </div>\n    \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}